apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

ext {
    navitiaSdkVersion = '1.0.0'
    supportLibraryVersion = '26.1.0'
    lithoVersion = '0.6.1'

    groupId = 'org.kisio.sdk'
    artifactId = 'navitia-sdk-ux'
    description = "Navitia SDK UX Android ${navitiaSdkVersion}"
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << '-Xmaxerrs' << '1000'
        }
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName navitiaSdkVersion

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/navitiasdkteam/NavitiaSDK'
    }
}

dependencies {
    implementation "com.android.support:appcompat-v7:${supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibraryVersion}"
    implementation "com.facebook.litho:litho-core:${lithoVersion}"
    implementation "com.facebook.litho:litho-widget:${lithoVersion}"
    implementation "com.facebook.litho:litho-annotations:${lithoVersion}"
    implementation 'com.facebook.soloader:soloader:0.2.0'
    implementation 'com.google.android.gms:play-services-maps:11.8.0'
    implementation 'org.kisio.sdk:navitia-sdk:0.3.0' // use navitiaSdkVersion later

    annotationProcessor "com.facebook.litho:litho-processor:${lithoVersion}"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

def pomConfig = {
    licenses {
        license {
            name 'GNU General Public License, Version 3'
            url 'https://www.navitia.io/api-term-of-use'
            distribution 'repo'
        }
    }
    developers {
        developer {
            name 'Kisio Digital SDK'
            email 'team.sdk@kisio.org'
            organization 'Kisio Digital'
            organizationUrl 'http://www.kisiodigital.com/'
        }
    }
    scm {
        connection 'scm:git:git://github.com/CanalTP/NavitiaSDKUX_android.git'
        developerConnection 'scm:git:ssh://github.com:CanalTP/NavitiaSDKUX_android.git'
        url 'https://github.com/CanalTP/NavitiaSDKUX_android/tree/master'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId groupId
            artifactId artifactId
            version navitiaSdkVersion
            // Or use same version as in android branch
            // version = android.defaultConfig.versionName

            artifact bundleRelease
            artifact androidJavadocsJar
            artifact androidSourcesJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', artifactId)
                root.appendNode('url', 'https://github.com/CanalTP/NavitiaSDKUX_android')

                def dependenciesNode = root.appendNode('dependencies')

                // List all compile dependencies and write to POM
                configurations.compile.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == 'unspecified')
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                root.children().last() + pomConfig
            }
        }
    }
}

// "gradle -Puser=someuser -Pkey=ASDFASDFASDF androidSourcesJar androidJavadocsJar bundleRelease bintrayUpload" to build and send to jcenter
bintray {
    user = project.hasProperty('user') ? property('user') : ''
    key = project.hasProperty('key') ? property('key') : ''
    publications = ['maven']
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = false //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = 'NavitiaSDK'
        name = artifactId
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/CanalTP/NavitiaSDKUX_android.git'
        version {
            name = navitiaSdkVersion
            desc = description
            released  = new Date()
            vcsTag = navitiaSdkVersion
            gpg {
                sign = true
            }
        }
    }
}